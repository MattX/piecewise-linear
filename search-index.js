var searchIndex = JSON.parse('{\
"piecewise_linear":{"doc":"This crate provides utilities to manipulate continuous …","t":"DIENNDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLL","n":["Coord","CoordFloat","ExpandDomainStrategy","ExtendSegment","ExtendValue","Line","LineString","PiecewiseLinearFunction","Point","PointsOfInflectionIterator","SegmentsIterator","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add_assign","affine_transform","affine_transform","affine_transform","affine_transform_mut","affine_transform_mut","affine_transform_mut","bearing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_dimensions","boundary_dimensions","boundary_dimensions","bounding_rect","bounding_rect","bounding_rect","bounding_rect","calculate_coordinate_position","calculate_coordinate_position","calculate_coordinate_position","calculate_coordinate_position","centroid","centroid","centroid","chaikin_smoothing","chamberlain_duquette_signed_area","chamberlain_duquette_signed_area","chamberlain_duquette_signed_area","chamberlain_duquette_unsigned_area","chamberlain_duquette_unsigned_area","chamberlain_duquette_unsigned_area","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","closest_point","closest_point","closest_point","closest_point","concave_hull","constant","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains_point","contains_point","convert","convert","convert","convex_hull","convex_hull","convex_hull","convex_orientation","coordinates","coords","coords_count","coords_count","coords_count","coords_iter","coords_iter","coords_iter","coords_mut","cross_prod","cross_track_distance","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","delta","densify","densify","determinant","dimensions","dimensions","dimensions","distance_2","distance_2","distance_2","distance_2","distance_2_if_less_or_equal","distance_2_if_less_or_equal","div","div","div_assign","domain","dot","dx","dy","end","end_point","envelope","envelope","envelope","envelope","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_length","euclidean_length","expand_domain","exterior_coords_iter","exterior_coords_iter","exterior_coords_iter","extremes","extremes","extremes","fmt","fmt","fmt","fmt","fmt","fmt","frechet_distance","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","generate","generate","geodesic_area_signed","geodesic_area_signed","geodesic_area_signed","geodesic_area_unsigned","geodesic_area_unsigned","geodesic_area_unsigned","geodesic_bearing","geodesic_bearing_distance","geodesic_destination","geodesic_distance","geodesic_intermediate","geodesic_intermediate_fill","geodesic_length","geodesic_length","geodesic_perimeter","geodesic_perimeter","geodesic_perimeter","geodesic_perimeter_area_signed","geodesic_perimeter_area_signed","geodesic_perimeter_area_signed","geodesic_perimeter_area_unsigned","geodesic_perimeter_area_unsigned","geodesic_perimeter_area_unsigned","has_same_domain_as","hash","hash","hash","hash","haversine_bearing","haversine_closest_point","haversine_closest_point","haversine_closest_point","haversine_closest_point","haversine_destination","haversine_distance","haversine_intermediate","haversine_intermediate_fill","haversine_length","haversine_length","index","index_mut","integrate","interior_point","interior_point","interior_point","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_points","is_closed","is_collinear","is_empty","is_empty","is_empty","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_within","is_zero","lat","line","line_interpolate_point","line_interpolate_point","line_locate_point","line_locate_point","lines","lines_iter","lines_iter","lng","make_ccw_winding","make_cw_winding","map_coords","map_coords","map_coords","map_coords_in_place","map_coords_in_place","map_coords_in_place","max","min","minimum_rotated_rect","minimum_rotated_rect","minimum_rotated_rect","mul","mul","mul_assign","multiunzip","neg","neg","neg","negate","new","new","new","new","next","next","nth","nth","nth_mut","nth_mut","num_coords","points","points","points_ccw","points_cw","points_iter","points_of_inflection_iter","points_of_inflection_iter","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relate","relative_eq","relative_eq","relative_eq","relative_eq","remove_repeated_points","remove_repeated_points","remove_repeated_points","remove_repeated_points_mut","remove_repeated_points_mut","remove_repeated_points_mut","rotate_around_center","rotate_around_center","rotate_around_center","rotate_around_center_mut","rotate_around_center_mut","rotate_around_center_mut","rotate_around_centroid","rotate_around_centroid","rotate_around_centroid","rotate_around_centroid_mut","rotate_around_centroid_mut","rotate_around_centroid_mut","rotate_around_point","rotate_around_point","rotate_around_point","rotate_around_point_mut","rotate_around_point_mut","rotate_around_point_mut","scale","scale","scale","scale_around_point","scale_around_point","scale_around_point","scale_around_point_mut","scale_around_point_mut","scale_around_point_mut","scale_mut","scale_mut","scale_mut","scale_xy","scale_xy","scale_xy","scale_xy_mut","scale_xy_mut","scale_xy_mut","segment_at_x","segments_iter","set_lat","set_lng","set_x","set_y","shrink_domain","signed_area","signed_area","signed_area","simplify","simplify_idx","simplify_vw","simplify_vw_idx","simplify_vw_preserve","skew","skew","skew","skew_around_point","skew_around_point","skew_around_point","skew_around_point_mut","skew_around_point_mut","skew_around_point_mut","skew_mut","skew_mut","skew_mut","skew_xy","skew_xy","skew_xy","skew_xy_mut","skew_xy_mut","skew_xy_mut","slope","start","start_point","sub","sub","sub_assign","sum","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","translate","translate","translate","translate_mut","translate_mut","translate_mut","triangles","try_convert","try_convert","try_convert","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map_coords","try_map_coords","try_map_coords","try_map_coords_in_place","try_map_coords_in_place","try_map_coords_in_place","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ulps_eq","unsigned_area","unsigned_area","unsigned_area","vincenty_distance","vincenty_length","vincenty_length","winding_order","x","x","x_mut","x_y","x_y","y","y","y_at_x","y_mut","zero","zero"],"q":[[0,"piecewise_linear"]],"d":["A lightweight struct used to store coordinates on the …","For algorithms which can only use floating point <code>Point</code>s/…","Controls how the domain of a function is expanded using …","Extend the segment at the edge of the function.","Add a constant segment with the value of the edge point of …","A line segment made up of exactly two <code>Coord</code>s.","An ordered collection of two or more <code>Coord</code>s, representing a","A continuous piecewise linear function.","A single point in 2D space.","Structure returned by <code>points_of_inflection_iter()</code>","Structure returned by <code>segments_iter()</code> on a …","Computes the absolute value of this function.","","Equality assertion with an absolute limit.","Equality assertion with an absolute limit.","Equality assertion with an absolute limit.","Sums this method with another piecewise linear function.","","Add a point to the given point.","Add a point to the given point and assign it to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the bounding rectangle for a <code>Coord</code>. It will have …","","Return the BoundingRect for a LineString","Return the bounding rectangle for a <code>Point</code>. It will have …","","","","","The Centroid of a <code>Line</code> is its middle point","Examples","The Centroid of a <code>Point</code> is the point itself","","","","","","","","","","","","","","","","","","","","Close the <code>LineString</code>. Specifically, if the <code>LineString</code> has …","","","","","","Returns a new constant <code>PiecewiseLinearFunction</code> with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Vector of points that make up the function.","Return an iterator yielding the members of a <code>LineString</code> as …","Return the number of coordinates in the <code>Line</code>.","Return the number of coordinates in the <code>LineString</code>.","Return the number of coordinates in the <code>Point</code>.","","","","Return an iterator yielding the coordinates of a <code>LineString</code>…","Returns the cross product of 3 points. A positive value …","","","","","","","","","","","","","Calculate the difference in coordinates (Δx, Δy).","","","Calculate the determinant of the line.","","","","","","","","","","","Scaler division of a point","Scaler division of a point in place","Returns a function’s domain, represented as its min and …","Returns the dot product of the two points: …","Calculate the difference in ‘x’ components (Δx).","Calculate the difference in ‘y’ components (Δy).","","","","","","","","","","","","","","","","","","Minimum distance between two <code>Coord</code>s","Minimum distance from a <code>Coord</code> to a <code>Line</code>","","Minimum distance from a Line to a Point","","","","Minimum distance from a <code>Line</code> to a <code>Coord</code>","","Minimum distance from a LineString to a Point","","","Minimum distance from a Line to a Point","Minimum distance from a Point to a Polygon","Minimum distance from a Point to a MultiPoint","Minimum distance from a Point to a LineString","Minimum distance from a Point to a MultiPolygon","Minimum distance from a Point to a MultiLineString","Minimum distance between two Points","","","Returns a new piecewise linear function that is the …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","The units of the returned value is meters.","","","","","","","","","","","Checks whether this function has the same domain as …","","","","","","","","","","","","","","","","","","Returns the integral of the considered function over its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the coordinates of a <code>LineString</code> as a <code>Vec</code> of <code>Coord</code>s","","","","","","Return the coordinates of a <code>LineString</code> as a <code>Vec</code> of <code>Point</code>s","Checks if the linestring is closed; i.e. it is either …","","","","","","","","","","","","","","Returns the latitude/vertical component of the point.","","","","","","Return an iterator yielding one Line for each line segment …","","","Returns the longitude/horizontal component of the point.","Change this line’s points so they are in …","Change this line’s points so they are in clockwise …","","","","","","","Returns a new piecewise linear function that is the …","Computes the minimum of this function and <code>other</code>.","","","","","Scaler multiplication of a point","Scaler multiplication of a point in place","","","","Returns a point with the x and y components negated.","Returns -f.","Creates a new <code>PiecewiseLinearFunction</code> from a vector of …","Creates a new line segment.","Instantiate Self from the raw content value","Creates a new point.","","","","","","","Return the number of coordinates in the <code>LineString</code>.","","Return an iterator yielding the coordinates of a <code>LineString</code>…","Iterate over the points in a counter-clockwise order","Iterate over the points in a clockwise order","Return an iterator yielding the coordinates of a <code>LineString</code>…","Returns an iterator over pairs <code>(x, values)</code>, where <code>x</code> is the …","Returns an iterator over the joint points of inflection of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equality assertion within a relative limit.","Equality assertion within a relative limit.","Equality assertion within a relative limit.","","Create a LineString with consecutive repeated points …","","","Remove consecutive repeated points from a LineString …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a segment <code>((x1, y1), (x2, y2))</code> of this function …","Returns an iterator over the segments of f.","Sets the latitude/vertical component of the point.","Sets the longitude/horizontal component of the point.","Sets the x/horizontal component of the point.","Sets the y/vertical component of the point.","Returns a new piecewise linear function that is the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the slope (Δy/Δx).","","","","Subtract a point from the given point.","Subtract a point from the given point and assign it to the …","Sums the functions together. Returns <code>None</code> in case of …","Converts the (x,y) components of Point to degrees","","","","","","","Converts the (x,y) components of Point to radians","","","","","","","An iterator which yields the coordinates of a <code>LineString</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The units of the returned value is meters.","","","Returns the x/horizontal component of the point.","","Returns a mutable reference to the x/horizontal component …","Returns a tuple that contains the x/horizontal &amp; …","Returns a tuple that contains the x/horizontal &amp; …","Returns the y/vertical component of the point.","","Computes the value f(x) for this piecewise linear function.","Returns a mutable reference to the x/horizontal component …","",""],"i":[0,0,0,19,19,0,0,0,0,0,0,3,6,8,9,10,3,6,10,10,8,9,10,8,9,10,10,64,65,3,19,6,8,9,10,64,65,3,19,6,8,9,10,8,9,10,6,8,9,10,6,8,9,10,8,9,10,9,8,9,10,8,9,10,3,19,6,8,9,10,3,19,6,8,9,10,9,6,8,9,10,9,3,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,6,10,8,9,10,8,9,10,9,3,9,8,9,10,8,9,10,9,10,10,6,10,6,8,9,10,6,8,9,10,6,8,8,9,8,8,9,10,6,8,9,10,6,10,6,10,10,3,10,8,8,8,8,6,8,9,10,3,19,6,8,9,10,19,6,8,9,10,6,6,8,8,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,8,9,3,8,9,10,8,9,10,3,19,6,8,9,10,9,64,65,3,19,6,6,6,6,8,8,9,9,9,9,10,10,10,10,9,6,10,8,9,10,8,9,10,10,10,10,10,10,10,8,9,8,9,10,8,9,10,8,9,10,3,6,8,9,10,10,6,8,9,10,10,10,10,10,8,9,9,9,3,8,9,10,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,9,10,10,10,64,65,3,19,6,8,9,10,9,64,65,9,9,9,9,9,9,8,9,10,64,65,3,19,6,8,9,10,6,10,8,8,9,8,9,9,8,9,10,9,9,8,9,10,8,9,10,3,3,8,9,10,6,10,10,64,3,6,10,3,3,8,9,10,64,65,6,10,6,10,9,8,9,9,9,9,0,3,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,6,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,3,3,10,10,10,10,3,8,9,10,9,9,9,9,9,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,8,8,6,10,10,0,10,3,19,6,8,9,10,10,8,9,10,8,9,10,9,8,9,10,64,65,3,3,3,3,3,19,6,8,8,9,9,10,10,64,65,3,19,6,8,9,10,8,9,10,8,9,10,64,65,3,19,6,8,9,10,6,8,9,10,10,8,9,9,10,6,10,6,10,10,6,3,10,6,6],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[6,[[0,[4,[5,[[0,[4,[5,[[0,[4,[5,[[0,[4,5]]]]]]]]]]]]]]]],[6,[[0,[4,[5,[[0,[4,[5,[[0,[4,[5,[[0,[4,5]]]]]]]]]]]]]]]]],7],[[[8,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4]]]],4]]]],4]]]],4]]]],[8,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4]]]],4]]]],4]]]],4]]]]],7],[[[9,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4]]]],4]]]],4]]]],4]]]],[9,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4]]]],4]]]],4]]]],4]]]]],7],[[[10,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4]]]],4]]]],4]]]],4]]]],[10,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4]]]],4]]]],4]]]],4]]]]],7],[[[3,[1]],[3,[1]]],[[11,[[3,[1]]]]]],[[[6,[4]],[6,[4]]],[[6,[4]]]],[[[10,[4]],[10,[4]]]],[[[10,[4]],[10,[4]]]],[12],[12],[12],[12],[12],[12],[10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[4]]],13],[[[9,[4]]],13],[[[10,[4]]],13],[[[6,[4]]]],[[[8,[4]]]],[[[9,[4]]]],[[[10,[4]]]],[[[6,[14]],[6,[14]],7,15]],[[[8,[14]],[6,[14]],7,15]],[[[9,[14]],[6,[14]],7,15]],[[[10,[14]],[6,[14]],7,15]],[[[8,[16]]]],[[[9,[16]]]],[[[10,[16]]]],[[[9,[[0,[1,17]]]],15],[[9,[[0,[1,17]]]]]],[[[8,[1]]],1],[[[9,[1]]],1],[[[10,[1]]],1],[[[8,[1]]],1],[[[9,[1]]],1],[[[10,[1]]],1],[[[3,[[0,[18,1]]]]],[[3,[[0,[18,1]]]]]],[19,19],[[[6,[[0,[18,4]]]]],[[6,[[0,[18,4]]]]]],[[[8,[[0,[18,4]]]]],[[8,[[0,[18,4]]]]]],[[[9,[[0,[18,4]]]]],[[9,[[0,[18,4]]]]]],[[[10,[[0,[18,4]]]]],[[10,[[0,[18,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[4]]]],[[[6,[16]],[10,[16]]],[[20,[16]]]],[[[8,[16]],[10,[16]]],[[20,[16]]]],[[[9,[16]],[10,[16]]],[[20,[16]]]],[[[10,[16]],[10,[16]]],[[20,[16]]]],[[[9,[[0,[16,21]]]]],22],[1,[[11,[[3,[1]]]]]],[[[8,[14]],[8,[14]]],7],[[[8,[14]],[9,[14]]],7],[[[8,[16]],[23,[16]]],7],[[[8,[16]],[22,[16]]],7],[[[8,[16]],[24,[16]]],7],[[[8,[16]],[25,[16]]],7],[[[8,[14]],[6,[14]]],7],[[[8,[16]],[26,[16]]],7],[[[8,[14]],[10,[14]]],7],[[[8,[16]],[27,[16]]],7],[[[8,[16]],[28,[16]]],7],[[[8,[16]],[29,[16]]],7],[[[9,[16]],[23,[16]]],7],[[[9,[14]],[9,[14]]],7],[[[9,[16]],[28,[16]]],7],[[[9,[16]],[27,[16]]],7],[[[9,[14]],[8,[14]]],7],[[[9,[14]],[6,[14]]],7],[[[9,[16]],[24,[16]]],7],[[[9,[14]],[10,[14]]],7],[[[9,[16]],[22,[16]]],7],[[[9,[16]],[29,[16]]],7],[[[9,[16]],[26,[16]]],7],[[[9,[16]],[25,[16]]],7],[[[10,[4]],[10,[4]]],7],[[[10,[4]],[6,[4]]],7],[[[10,[16]],[25,[16]]],7],[[[10,[4]],[8,[4]]],7],[[[10,[4]],[9,[4]]],7],[[[10,[4]],[23,[4]]],7],[[[10,[16]],[28,[16]]],7],[[[10,[4]],[22,[4]]],7],[[[10,[4]],[24,[4]]],7],[[[10,[4]],[29,[4]]],7],[[[10,[4]],[26,[4]]],7],[[[10,[4]],[27,[4]]],7],[[],7],[[],7],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[[9,[30]],7,[11,[31]]],[[11,[31]]]],0,[[[9,[4]]],32],[[[8,[4]]],15],[[[9,[4]]],15],[[[10,[4]]],15],[[[8,[4]]]],[[[9,[4]]]],[[[10,[4]]]],[[[9,[4]]],32],[[[10,[4]],[10,[4]],[10,[4]]],4],[[[10,[[0,[1,17]]]],[10,[[0,[1,17]]]],[10,[[0,[1,17]]]]],[[0,[1,17]]]],[[],[[6,[[0,[33,4]]]]]],[[],[[10,[[0,[33,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[[8,[4]]],[[6,[4]]]],[[[8,[1]],1]],[[[9,[1]],1]],[[[8,[4]]],4],[[[8,[4]]],13],[[[9,[4]]],13],[[[10,[4]]],13],[[]],[[[8,[[0,[35,21]]]],[10,[[0,[35,21]]]]],[[0,[35,21]]]],[[[9,[[0,[35,21]]]],[10,[[0,[35,21]]]]],[[0,[35,21]]]],[[]],[[],11],[[],11],[[[6,[4]],4],[[6,[4]]]],[[[10,[4]],4]],[[[10,[4]],4]],[[[3,[1]]]],[[[10,[4]],[10,[4]]],4],[[[8,[4]]],4],[[[8,[4]]],4],0,[[[8,[4]]],[[10,[4]]]],[[],36],[[[8,[[0,[35,21]]]]]],[[[9,[[0,[35,21]]]]]],[[],36],[[[3,[[0,[37,1]]]],[3,[[0,[37,1]]]]],7],[[19,19],7],[[[6,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]],[6,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]]],7],[[[8,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]],[8,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]]],7],[[[9,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]],[9,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]]],7],[[[10,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]],[10,[[0,[[37,[[0,[[37,[[0,[[37,[[0,[37,4]]]],4]]]],4]]]],4]]]]],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[[6,[16]],[6,[16]]],16],[[[6,[16]],[8,[16]]],16],[[[8,[[0,[16,2,21,38]]]],[22,[[0,[16,2,21,38]]]]],[[0,[16,2,21,38]]]],[[[8,[16]],[10,[16]]],16],[[[8,[[0,[16,38,2,21]]]],[29,[[0,[16,38,2,21]]]]],[[0,[16,38,2,21]]]],[[[8,[[0,[16,38,2,21]]]],[9,[[0,[16,38,2,21]]]]],[[0,[16,38,2,21]]]],[[[8,[[0,[16,38,2,21]]]],[8,[[0,[16,38,2,21]]]]],[[0,[16,38,2,21]]]],[[[8,[16]],[6,[16]]],16],[[[9,[[0,[16,38,2,21]]]],[8,[[0,[16,38,2,21]]]]],[[0,[16,38,2,21]]]],[[[9,[16]],[10,[16]]],16],[[[9,[[0,[16,38,2,21]]]],[22,[[0,[16,38,2,21]]]]],[[0,[16,38,2,21]]]],[[[9,[[0,[16,2,21]]]],[9,[[0,[16,2,21]]]]],[[0,[16,2,21]]]],[[[10,[16]],[8,[16]]],16],[[[10,[16]],[22,[16]]],16],[[[10,[16]],[23,[16]]],16],[[[10,[16]],[9,[16]]],16],[[[10,[16]],[29,[16]]],16],[[[10,[16]],[26,[16]]],16],[[[10,[16]],[10,[16]]],16],[[[8,[1]]],1],[[[9,[[0,[1,[39,[[0,[1,[39,[[0,[1,[39,[[0,[1,39]]]]]]]]]]]]]]]]],[[0,[1,[39,[[0,[1,[39,[[0,[1,[39,[[0,[1,[39,[[0,[1,39]]]]]]]]]]]]]]]]]]]],[[[3,[1]],19],[[3,[1]]]],[[[8,[4]]]],[[[9,[4]]]],[[[10,[4]]]],[[],[[11,[40]]]],[[],[[11,[40]]]],[[],[[11,[40]]]],[[[3,[[0,[41,1]]]],42],43],[[19,42],43],[[[6,[[0,[41,4]]]],42],[[45,[44]]]],[[[8,[[0,[41,4]]]],42],[[45,[44]]]],[[[9,[[0,[41,4]]]],42],[[45,[44]]]],[[[10,[[0,[41,4]]]],42],[[45,[44]]]],[[[9,[[0,[16,17]]]],[9,[[0,[16,17]]]]],[[0,[16,17]]]],[[]],[[]],[[]],[[]],[[[10,[4]]],[[6,[4]]]],[[],[[6,[4]]]],[[]],[[[46,[4]]],[[6,[4]]]],[46,[[8,[4]]]],[[]],[[[8,[4]]],[[9,[4]]]],[[]],[[[49,[[47,[[6,[4]]]],48]]],[[9,[4]]]],[[[8,[4]]],[[9,[4]]]],[[[46,[4]]],[[10,[4]]]],[[[6,[4]]],[[10,[4]]]],[[]],[[],[[10,[4]]]],[50,[[9,[4]]]],[51,[[6,[[0,[35,21]]]]]],[51,[[10,[[0,[35,21]]]]]],[[[8,[52]]],52],[[[9,[52]]],52],[[[10,[52]]],52],[[[8,[52]]],52],[[[9,[52]]],52],[[[10,[52]]],52],[[[10,[52]],[10,[52]]],52],[[[10,[52]],[10,[52]]]],[[[10,[52]],52,52],[[10,[52]]]],[[[10,[52]],[10,[52]]],52],[[[10,[52]],[10,[52]],52],[[10,[52]]]],[[[10,[52]],[10,[52]],52,7],[[49,[[10,[52]],48]]]],[[[8,[52]]],52],[[[9,[52]]],52],[[[8,[52]]],52],[[[9,[52]]],52],[[[10,[52]]],52],[[[8,[52]]]],[[[9,[52]]]],[[[10,[52]]]],[[[8,[52]]]],[[[9,[52]]]],[[[10,[52]]]],[[[3,[1]],[3,[1]]],7],[[[6,[[0,[53,4]]]],54]],[[[8,[[0,[53,4]]]],54]],[[[9,[[0,[53,4]]]],54]],[[[10,[[0,[53,4]]]],54]],[[[10,[1]],[10,[1]]],1],[[[6,[[0,[16,17]]]],[10,[[0,[16,17]]]]],[[20,[[0,[16,17]]]]]],[[[8,[[0,[16,17]]]],[10,[[0,[16,17]]]]],[[20,[[0,[16,17]]]]]],[[[9,[[0,[16,17]]]],[10,[[0,[16,17]]]]],[[20,[[0,[16,17]]]]]],[[[10,[[0,[16,17]]]],[10,[[0,[16,17]]]]],[[20,[[0,[16,17]]]]]],[[[10,[[0,[1,17]]]],[0,[1,17]],[0,[1,17]]],[[10,[[0,[1,17]]]]]],[[[10,[[0,[1,17]]]],[10,[[0,[1,17]]]]],[[0,[1,17]]]],[[[10,[[0,[1,17]]]],[10,[[0,[1,17]]]],[0,[1,17]]],[[10,[[0,[1,17]]]]]],[[[10,[[0,[1,17]]]],[10,[[0,[1,17]]]],[0,[1,17]],7],[[49,[[10,[[0,[1,17]]]],48]]]],[[[8,[[0,[1,17]]]]],[[0,[1,17]]]],[[[9,[[0,[1,17]]]]],[[0,[1,17]]]],[[[9,[4]],15],[[6,[4]]]],[[[9,[4]],15],[[6,[4]]]],[[[3,[[0,[1,39]]]]],[[0,[1,39]]]],[[[8,[16]]]],[[[9,[16]]]],[[[10,[16]]]],[[[6,[4]],[22,[4]]],7],[[[6,[4]],[25,[4]]],7],[[[6,[4]],[24,[4]]],7],[[[6,[4]],[9,[4]]],7],[[[6,[4]],[6,[4]]],7],[[[6,[4]],[8,[4]]],7],[[[6,[4]],[23,[4]]],7],[[[6,[4]],[28,[4]]],7],[[[6,[4]],[10,[4]]],7],[[[6,[4]],[27,[4]]],7],[[[8,[14]],[8,[14]]],7],[[[8,[4]],[23,[4]]],7],[[[8,[4]],[26,[4]]],7],[[[8,[4]],[27,[4]]],7],[[[8,[4]],[22,[4]]],7],[[[8,[4]],[25,[4]]],7],[[[8,[14]],[6,[14]]],7],[[[8,[4]],[9,[4]]],7],[[[8,[4]],[10,[4]]],7],[[[8,[4]],[29,[4]]],7],[[[8,[4]],[24,[4]]],7],[[[8,[4]],[28,[4]]],7],[[[9,[4]],[55,[4]]],7],[[[10,[4]]],7],[[[10,[4]],[26,[4]]],7],[[[10,[4]],[29,[4]]],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[4]]],[[49,[[6,[4]],48]]]],[[]],[[]],[[[9,[4]]]],[[[9,[4]]],[[56,[[6,[4]]]]]],[[[9,[4]]]],[[[9,[4]]],[[49,[[10,[4]],48]]]],[[[9,[4]]],7],[[[9,[30]]],7],[[[8,[4]]],7],[[[9,[4]]],7],[[[10,[4]]],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[[6,[4]]],7],[[[10,[4]]],4],[[[8,[16]]],57],[[[8,[1]],1]],[[[9,[[0,[1,[58,[[0,[1,[58,[[0,[1,[58,[[0,[1,58,41]]]],41]]]],41]]]],41]]]],[0,[1,[58,[[0,[1,[58,[[0,[1,[58,[[0,[1,[58,[[0,[1,58,41]]]],41]]]],41]]]],41]]]],41]]]],[[[8,[1]]]],[[[9,[[0,[1,[58,[[0,[1,[58,[[0,[1,[58,[[0,[1,58]]]]]]]]]]]]]]]]]],[[[9,[4]]],[[0,[59,60]]]],[[[8,[4]]]],[[[9,[4]]]],[[[10,[4]]],4],[[[9,[30]]]],[[[9,[30]]]],[[[8,[4]],[0,[61,62]]]],[[[9,[4]],[0,[61,62]]]],[[[10,[4]],[0,[61,62]]]],[[[8,[4]],61]],[[[9,[4]],61]],[[[10,[4]],61]],[[[3,[1]],[3,[1]]],[[11,[[3,[1]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]],[[11,[[3,[[0,[1,2]]]]]]]],[[],[[11,[22]]]],[[],[[11,[22]]]],[[],[[11,[22]]]],[[[6,[4]],4],[[6,[4]]]],[[[10,[4]],4]],[[[10,[4]],4]],[[]],[[[3,[[0,[1,2]]]]]],[[[6,[[0,[4,63]]]]],[[6,[[0,[4,63]]]]]],[[[10,[[0,[4,63]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[49,[[6,[1]]]]],[[11,[[3,[1]]]]]],[[[47,[[6,[4]]]],[47,[[6,[4]]]]],[[8,[4]]]],[[[49,[[6,[4]],48]]],[[9,[4]]]],[[4,4],[[10,[4]]]],[[[64,[1]]],11],[[[65,[1]]],11],[[[6,[[0,[35,21]]]],15]],[[[10,[[0,[35,21]]]],15]],[[[6,[[0,[35,21]]]],15]],[[[10,[[0,[35,21]]]],15]],[[[9,[4]]],15],[[[8,[4]]]],[[[9,[4]]],[[66,[4]]]],[[[9,[30]]],67],[[[9,[30]]],67],[[[9,[4]]],[[66,[4]]]],[[[68,[[3,[1]]]]],[[11,[[64,[1]]]]]],[[[3,[1]],[3,[1]]],[[11,[[64,[1]]]]]],[[[8,[16]],[29,[16]]],69],[[[8,[16]],[27,[16]]],69],[[[8,[16]],[22,[16]]],69],[[[8,[16]],[24,[16]]],69],[[[8,[16]],[23,[16]]],69],[[[8,[16]],[10,[16]]],69],[[[8,[16]],[9,[16]]],69],[[[8,[16]],[8,[16]]],69],[[[8,[16]],[28,[16]]],69],[[[8,[16]],[26,[16]]],69],[[[9,[16]],[29,[16]]],69],[[[9,[16]],[22,[16]]],69],[[[9,[16]],[23,[16]]],69],[[[9,[16]],[9,[16]]],69],[[[9,[16]],[26,[16]]],69],[[[9,[16]],[27,[16]]],69],[[[9,[16]],[8,[16]]],69],[[[9,[16]],[28,[16]]],69],[[[9,[16]],[24,[16]]],69],[[[9,[16]],[10,[16]]],69],[[[10,[16]],[29,[16]]],69],[[[10,[16]],[8,[16]]],69],[[[10,[16]],[28,[16]]],69],[[[10,[16]],[10,[16]]],69],[[[10,[16]],[27,[16]]],69],[[[10,[16]],[24,[16]]],69],[[[10,[16]],[9,[16]]],69],[[[10,[16]],[26,[16]]],69],[[[10,[16]],[22,[16]]],69],[[[10,[16]],[23,[16]]],69],[[[6,[[0,[4,[70,[[0,[4,[70,[[0,[4,[70,[[0,[4,70]]]]]]]]]]]]]]]],[6,[[0,[4,[70,[[0,[4,[70,[[0,[4,[70,[[0,[4,70]]]]]]]]]]]]]]]]],7],[[[8,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]],4,[70,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]]]]]],[8,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]],4,[70,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]]]]]]],7],[[[9,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]],4,[70,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]]]]]],[9,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]],4,[70,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]]]]]]],7],[[[10,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]],4,[70,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]]]]]],[10,[[0,[[5,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]],4,[70,[[0,[[5,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]],4,[70,[[0,[[5,[[0,[5,4,70]]]],4,[70,[[0,[5,4,70]]]]]]]]]]]]]]]]],7],[[[8,[[0,[4,17]]]]],[[8,[[0,[4,17]]]]]],[[[9,[[0,[4,17]]]]],[[9,[[0,[4,17]]]]]],[[[10,[[0,[4,17]]]]],[[10,[[0,[4,17]]]]]],[[[8,[[0,[4,17]]]]]],[[[9,[[0,[4,17]]]]]],[[[10,[[0,[4,17]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10],[10],[10],[10],[10],[10],[[]],[[]],[[]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[1]],1],[[11,[[8,[1]]]]]],[[[3,[1]]],[[65,[1]]]],[[[10,[4]],4],[[10,[4]]]],[[[10,[4]],4],[[10,[4]]]],[[[10,[4]],4],[[10,[4]]]],[[[10,[4]],4],[[10,[4]]]],[[[3,[1]]],[[11,[[3,[1]]]]]],[[[8,[4]]],4],[[[9,[4]]],4],[[[10,[4]]],4],[[[9,[16]],16],[[9,[16]]]],[[[9,[16]],16],[[49,[15,48]]]],[[[9,[1]],1],[[9,[1]]]],[[[9,[1]],1],[[49,[15,48]]]],[[[9,[[0,[1,21,30]]]],[0,[1,21,30]]],[[9,[[0,[1,21,30]]]]]],[[]],[[]],[[]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[[47,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[4]]],4],0,[[[8,[4]]],[[10,[4]]]],[[[6,[4]],[6,[4]]],[[6,[4]]]],[[[10,[4]],[10,[4]]]],[[[10,[4]],[10,[4]]]],[[[68,[[3,[[0,[1,39]]]]]]],[[11,[[3,[[0,[1,39]]]]]]]],[[[10,[1]]],[[10,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[1]]],[[10,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[4]]],[[0,[59,60]]]],[[]],[[]],[[]],[[],45],[[],45],[[[49,[[10,[1]]]]],[[45,[[3,[1]]]]]],[[[49,[[6,[1]]]]],[[45,[[3,[1]]]]]],[[],45],[49,[[45,[[3,[1]]]]]],[[[9,[1]]],[[45,[[3,[1]]]]]],[[],45],[[],45],[[[25,[4]]],[[45,[[8,[4]]]]]],[[],45],[[[25,[4]]],[[45,[[9,[4]]]]]],[[],45],[[],45],[[[25,[4]]],[[45,[[10,[4]]]]]],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[[8,[4]],[0,[61,62]]],45],[[[9,[4]],[0,[61,62]]],45],[[[10,[4]],61],45],[[[8,[4]],61],45],[[[9,[4]],61],45],[[[10,[4]],61],45],[[],71],[[],71],[[],71],[[],71],[[],71],[[],71],[[],71],[[],71],[[[6,[[0,[4,[72,[[0,[4,[72,[[0,[4,[72,[[0,[4,72]]]]]]]]]]]]]]]],[6,[[0,[4,[72,[[0,[4,[72,[[0,[4,[72,[[0,[4,72]]]]]]]]]]]]]]]],34],7],[[[8,[4]]],4],[[[9,[4]]],4],[[[10,[4]]],4],[[[10,[[0,[1,17]]]],[10,[[0,[1,17]]]]],[[45,[[0,[1,17]],73]]]],[[[8,[[0,[1,17]]]]],[[45,[[0,[1,17]],73]]]],[[[9,[[0,[1,17]]]]],[[45,[[0,[1,17]],73]]]],[[[9,[30]]],[[11,[74]]]],[[[10,[4]]],4],0,[[[10,[4]]],4],[[[6,[4]]]],[[[10,[4]]]],[[[10,[4]]],4],0,[[[3,[1]],1],[[11,[1]]]],[[[10,[4]]],4],[[],[[6,[4]]]],[[],[[6,[4]]]]],"c":[26,343,352,384,389,470,471],"p":[[8,"CoordFloat"],[8,"Signed"],[3,"PiecewiseLinearFunction"],[8,"CoordNum"],[8,"AbsDiffEq"],[3,"Coord"],[15,"bool"],[3,"Line"],[3,"LineString"],[3,"Point"],[4,"Option"],[3,"AffineTransform"],[4,"Dimensions"],[8,"GeoNum"],[15,"usize"],[8,"GeoFloat"],[8,"FromPrimitive"],[8,"Clone"],[4,"ExpandDomainStrategy"],[4,"Closest"],[8,"RTreeNum"],[3,"Polygon"],[3,"MultiPoint"],[3,"Triangle"],[4,"Geometry"],[3,"MultiLineString"],[3,"Rect"],[3,"GeometryCollection"],[3,"MultiPolygon"],[8,"HasKernel"],[4,"Orientation"],[8,"DoubleEndedIterator"],[8,"Default"],[15,"u32"],[8,"Float"],[3,"AABB"],[8,"PartialEq"],[8,"FloatConst"],[8,"Sum"],[3,"Outcome"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[15,"array"],[8,"Into"],[3,"Global"],[3,"Vec"],[8,"IntoIterator"],[8,"FnMut"],[15,"f64"],[8,"Hash"],[8,"Hasher"],[8,"BoundingRect"],[3,"IterMut"],[3,"LineOrPoint"],[8,"AddAssign"],[8,"ExactSizeIterator"],[8,"Iterator"],[8,"Fn"],[8,"Copy"],[8,"Neg"],[3,"PointsOfInflectionIterator"],[3,"SegmentsIterator"],[3,"PointsIter"],[3,"Points"],[15,"slice"],[3,"IntersectionMatrix"],[8,"RelativeEq"],[3,"TypeId"],[8,"UlpsEq"],[3,"FailedToConvergeError"],[4,"WindingOrder"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
