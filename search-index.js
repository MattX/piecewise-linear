var searchIndex = JSON.parse('{\
"piecewise_linear":{"doc":"This crate provides utilities to manipulate continuous …","t":"DIENNDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLML","n":["Coordinate","CoordinateType","ExpandDomainStrategy","ExtendSegment","ExtendValue","Line","LineString","PiecewiseLinearFunction","Point","PointsOfInflectionIterator","SegmentsIterator","abs","add","add","area","bearing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_rect","bounding_rect","centroid","centroid","centroid","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closest_point","closest_point","closest_point","constant","contains","contains","contains","contains","contains","contains","contains_point","convex_hull","coordinates","cross_prod","determinant","distance_2","distance_2","distance_2","domain","dot","dx","dy","end","end_point","envelope","envelope","envelope","eq","eq","eq","eq","eq","eq","equivalent","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_distance","euclidean_length","euclidean_length","expand_domain","fmt","fmt","fmt","fmt","fmt","fmt","frechet_distance","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","generate","has_same_domain_as","haversine_destination","haversine_distance","haversine_intermediate","haversine_intermediate_fill","haversine_length","haversine_length","index","index_mut","integrate","intersects","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_points","lat","lines","lng","make_ccw_winding","make_cw_winding","map_coords","map_coords","map_coords","map_coords_inplace","map_coords_inplace","map_coords_inplace","max","min","neg","neg","negate","new","new","new","next","next","nth","nth_mut","num_coords","points","points_ccw","points_cw","points_iter","points_of_inflection_iter","points_of_inflection_iter","rotate","rotate","rotate","rotate_around_point","rotate_around_point","rotate_around_point","segment_at_x","segments_iter","set_lat","set_lng","set_x","set_y","shrink_domain","simplify","simplifyvw","simplifyvw_preserve","slope","start","start_point","sub","sum","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","translate","translate","translate","translate_inplace","translate_inplace","translate_inplace","triangles","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map_coords","try_map_coords","try_map_coords","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vincenty_distance","vincenty_length","vincenty_length","winding_order","x","x","x_y","x_y","y","y","y_at_x"],"q":[[0,"piecewise_linear"]],"d":["A lightweight struct used to store coordinates on the …","The type of an x or y value of a point/coordinate.","Controls how the domain of a function is expanded using …","Extend the segment at the edge of the function.","Add a constant segment with the value of the edge point of …","A line segment made up of exactly two <code>Point</code>s.","An ordered collection of two or more <code>Coordinate</code>s, …","A continuous piecewise linear function.","A single point in 2D space.","Structure returned by <code>points_of_inflection_iter()</code>","Structure returned by <code>segments_iter()</code> on a …","Computes the absolute value of this function.","Sums this method with another piecewise linear function.","Add a point to the given point.","","","","","","","","","","","","","","","","","","","","Return the BoundingRect for a LineString","","","","","","","","","","","","","","","","","","","Returns a new constant <code>PiecewiseLinearFunction</code> with the …","","","","","","","","","Vector of points that make up the function.","Returns the cross product of 3 points. A positive value …","Calculate the determinant of the line.","","","","Returns a function’s domain, represented as its min and …","Returns the dot product of the two points: …","Calculate the difference in ‘x’ components (Δx).","Calculate the difference in ‘y’ components (Δy).","","","","","","","","","","","","","Minimum distance from a Point to a MultiPolygon","Minimum distance between two Points","Minimum distance from a Point to a Polygon","Minimum distance from a Point to a MultiLineString","Minimum distance from a Point to a MultiPoint","Minimum distance from a Line to a Point","Minimum distance from a Point to a LineString","","","","","Minimum distance from a Line to a Point","","","Minimum distance from a LineString to a Point","","","","Returns a new piecewise linear function that is the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Checks whether this function has the same domain as …","","","","","","","","","Returns the integral of the considered function over its …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns the latitude/vertical component of the point.","Return an <code>Line</code> iterator that yields one <code>Line</code> for each line …","Returns the longitude/horizontal component of the point.","Change this line’s points so they are in …","Change this line’s points so they are in clockwise …","","","","","","","Returns a new piecewise linear function that is the …","Computes the minimum of this function and <code>other</code>.","","Returns a point with the x and y components negated.","Returns -f.","Creates a new <code>PiecewiseLinearFunction</code> from a vector of …","Creates a new point.","Creates a new line segment.","","","","","Return the number of coordinates in the <code>LineString</code>.","","Iterate over the points in a counter-clockwise order","Iterate over the points in a clockwise order","","Returns an iterator over pairs <code>(x, values)</code>, where <code>x</code> is the …","Returns an iterator over the joint points of inflection of …","Rotate the Point about itself by the given number of …","","Rotate the LineString about its centroid by the given …","","","","Returns a segment <code>((x1, y1), (x2, y2))</code> of this function …","Returns an iterator over the segments of f.","Sets the latitude/vertical component of the point.","Sets the longitude/horizontal component of the point.","Sets the x/horizontal component of the point.","Sets the y/vertical component of the point.","Returns a new piecewise linear function that is the …","","","","Calculate the slope (Δy/Δx).","","","Subtract a point from the given point.","Sums the functions together. Returns <code>None</code> in case of …","Converts the (x,y) components of Point to degrees","","","","","","","Converts the (x,y) components of Point to radians","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The units of the returned value is meters.","","Returns the winding order of this line None if the winding …","Returns the x/horizontal component of the point.","","Returns a tuple that contains the x/horizontal &amp; …","Returns a tuple that contains the x/horizontal &amp; …","Returns the y/vertical component of the point.","","Computes the value f(x) for this piecewise linear function."],"i":[0,0,0,10,10,0,0,0,0,0,0,3,3,5,6,5,39,40,3,10,11,5,6,8,39,40,3,10,11,5,6,8,6,8,5,6,8,3,10,11,5,6,8,3,10,11,5,6,8,5,6,8,3,5,6,6,6,8,8,5,8,3,5,6,5,6,8,3,5,6,6,6,6,5,6,8,3,10,11,5,6,8,10,5,5,5,5,5,5,5,6,6,6,6,6,8,8,8,8,6,8,3,3,10,11,5,6,8,8,39,40,3,10,11,11,11,11,5,5,5,5,6,6,8,8,8,5,3,5,5,5,5,6,8,8,8,3,5,6,6,6,6,8,8,8,39,40,3,3,10,11,5,6,8,39,40,8,8,5,8,5,8,8,5,6,8,5,6,8,3,3,3,5,3,3,5,6,39,40,5,5,8,6,8,8,8,0,3,5,6,8,5,6,8,3,3,5,5,5,5,3,8,8,8,6,6,6,5,0,5,3,10,11,5,6,8,5,5,6,8,5,6,8,8,39,40,3,3,3,3,3,10,11,5,6,8,39,40,3,10,11,5,6,8,5,6,8,39,40,3,10,11,5,6,8,5,6,8,8,5,11,11,5,5,11,3],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],[3,[1]]],[[4,[[3,[1]]]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[6,[1]]],1],[[[5,[7]],[5,[7]]],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[1]]]],[[[8,[1]]]],[[[5,[7]]]],[[[6,[7]]]],[[[8,[7]]]],[[[3,[[0,[9,1]]]]],[[3,[[0,[9,1]]]]]],[10,10],[[[11,[[0,[9,1]]]]],[[11,[[0,[9,1]]]]]],[[[5,[[0,[9,1]]]]],[[5,[[0,[9,1]]]]]],[[[6,[[0,[9,1]]]]],[[6,[[0,[9,1]]]]]],[[[8,[[0,[9,1]]]]],[[8,[[0,[9,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[7]],[5,[7]]],[[12,[7]]]],[[[6,[7]],[5,[7]]],[[12,[7]]]],[[[8,[7]],[5,[7]]],[[12,[7]]]],[1,[[4,[[3,[1]]]]]],[[[5,[7]],[5,[7]]],13],[[[6,[7]],[6,[7]]],13],[[[6,[7]],[5,[7]]],13],[[[6,[7]],[8,[7]]],13],[[[8,[7]],[5,[7]]],13],[[[8,[7]],[6,[7]]],13],[[],13],[[[8,[7]]],[[14,[7]]]],0,[[[5,[1]],[5,[1]],[5,[1]]],1],[[[6,[1]]],1],[[]],[[[6,[[0,[7,15]]]],[5,[[0,[7,15]]]]],[[0,[7,15]]]],[[[8,[[0,[7,15]]]],[5,[[0,[7,15]]]]],[[0,[7,15]]]],[[[3,[1]]]],[[[5,[1]],[5,[1]]],1],[[[6,[1]]],1],[[[6,[1]]],1],0,[[[6,[1]]],[[5,[1]]]],[[],16],[[[6,[[0,[7,15]]]]]],[[[8,[[0,[7,15]]]]]],[[[3,[[0,[17,1]]]],[3,[[0,[17,1]]]]],13],[[10,10],13],[[[11,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]],[11,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]]],13],[[[5,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]],[5,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]]],13],[[[6,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]],[6,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]]],13],[[[8,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]],[8,[[0,[[17,[[0,[[17,[[0,[[17,[[0,[17,1]]]],1]]]],1]]]],1]]]]],13],[[],13],[[[5,[7]],[18,[7]]],7],[[[5,[7]],[5,[7]]],7],[[[5,[7]],[14,[7]]],7],[[[5,[7]],[19,[7]]],7],[[[5,[7]],[20,[7]]],7],[[[5,[7]],[6,[7]]],7],[[[5,[7]],[8,[7]]],7],[[[6,[[0,[7,21,2,15]]]],[6,[[0,[7,21,2,15]]]]],[[0,[7,21,2,15]]]],[[[6,[[0,[7,2,15,21]]]],[14,[[0,[7,2,15,21]]]]],[[0,[7,2,15,21]]]],[[[6,[[0,[7,21,2,15]]]],[8,[[0,[7,21,2,15]]]]],[[0,[7,21,2,15]]]],[[[6,[[0,[7,21,2,15]]]],[18,[[0,[7,21,2,15]]]]],[[0,[7,21,2,15]]]],[[[6,[7]],[5,[7]]],7],[[[8,[[0,[7,21,2,15]]]],[14,[[0,[7,21,2,15]]]]],[[0,[7,21,2,15]]]],[[[8,[[0,[7,21,2,15]]]],[6,[[0,[7,21,2,15]]]]],[[0,[7,21,2,15]]]],[[[8,[7]],[5,[7]]],7],[[[8,[[0,[7,2,15]]]],[8,[[0,[7,2,15]]]]],[[0,[7,2,15]]]],[[[6,[7]]],7],[[[8,[[0,[7,[22,[[0,[7,[22,[[0,[7,[22,[[0,[7,22]]]]]]]]]]]]]]]]],[[0,[7,[22,[[0,[7,[22,[[0,[7,[22,[[0,[7,[22,[[0,[7,22]]]]]]]]]]]]]]]]]]]],[[[3,[1]],10],[[3,[1]]]],[[[3,[[0,[23,1]]]],24],25],[[10,24],25],[[[11,[[0,[23,1]]]],24],[[27,[26]]]],[[[5,[[0,[23,1]]]],24],[[27,[26]]]],[[[6,[[0,[23,1]]]],24],[[27,[26]]]],[[[8,[[0,[23,1]]]],24],[[27,[26]]]],[[[8,[[0,[7,28]]]],[8,[[0,[7,28]]]]],[[0,[7,28]]]],[[]],[[]],[[]],[[]],[[],[[11,[1]]]],[[]],[[[29,[1]]],[[11,[1]]]],[[[5,[1]]],[[11,[1]]]],[[[11,[1]]],[[5,[1]]]],[[],[[5,[1]]]],[[[29,[1]]],[[5,[1]]]],[[]],[[]],[29,[[6,[1]]]],[[[32,[[30,[[11,[1]]]],31]]],[[8,[1]]]],[[]],[33,[[8,[1]]]],[34,[[5,[[0,[7,15]]]]]],[[[3,[1]],[3,[1]]],13],[[[5,[[0,[7,28]]]],[0,[7,28]],[0,[7,28]]],[[5,[[0,[7,28]]]]]],[[[5,[[0,[7,28]]]],[5,[[0,[7,28]]]]],[[0,[7,28]]]],[[[5,[[0,[7,28]]]],[5,[[0,[7,28]]]],[0,[7,28]]],[[5,[[0,[7,28]]]]]],[[[5,[[0,[7,28]]]],[5,[[0,[7,28]]]],[0,[7,28]],13],[[32,[[5,[[0,[7,28]]]],31]]]],[[[6,[[0,[7,28]]]]],[[0,[7,28]]]],[[[8,[[0,[7,28]]]]],[[0,[7,28]]]],[[[8,[1]],35],[[11,[1]]]],[[[8,[1]],35],[[11,[1]]]],[[[3,[[0,[1,22]]]]],[[0,[1,22]]]],[[[5,[7]],[6,[7]]],13],[[[6,[7]],[8,[7]]],13],[[[6,[7]],[6,[7]]],13],[[[6,[7]],[5,[7]]],13],[[[6,[7]],[14,[7]]],13],[[[8,[7]],[6,[7]]],13],[[[8,[7]],[8,[7]]],13],[[[8,[7]],[14,[7]]],13],[[]],[[]],[[[3,[1]]],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[1]]]],[[[8,[1]]],[[32,[[5,[1]],31]]]],[[[5,[1]]],1],[[[8,[1]]],[[0,[36,37]]]],[[[5,[1]]],1],[[[8,[1]]]],[[[8,[1]]]],[[[5,[1]],34]],[[[6,[1]],34]],[[[8,[1]],34]],[[[5,[1]],34]],[[[6,[1]],34]],[[[8,[1]],34]],[[[3,[1]],[3,[1]]],[[4,[[3,[1]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]],[[4,[[3,[[0,[1,2]]]]]]]],[[[3,[[0,[1,2]]]]]],[[[5,[[0,[1,38]]]]],[[5,[[0,[1,38]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[32,[[11,[1]]]]],[[4,[[3,[1]]]]]],[[1,1],[[5,[1]]]],[[[30,[[11,[1]]]],[30,[[11,[1]]]]],[[6,[1]]]],[[[39,[1]]],4],[[[40,[1]]],4],[[[5,[[0,[7,15]]]],35]],[[[5,[[0,[7,15]]]],35]],[[[8,[1]]],35],[[[6,[1]]]],[[[8,[1]]],[[41,[1]]]],[[[8,[1]]],[[41,[1]]]],[[[8,[1]]],[[42,[1]]]],[[[43,[[3,[1]]]]],[[4,[[39,[1]]]]]],[[[3,[1]],[3,[1]]],[[4,[[39,[1]]]]]],[[[5,[7]],7],[[5,[7]]]],[[[6,[7]],7],[[6,[7]]]],[[[8,[7]],7],[[8,[7]]]],[5],[5],[5],[[[3,[1]],1],[[4,[[6,[1]]]]]],[[[3,[1]]],[[40,[1]]]],[[[5,[1]],1],[[5,[1]]]],[[[5,[1]],1],[[5,[1]]]],[[[5,[1]],1],[[5,[1]]]],[[[5,[1]],1],[[5,[1]]]],[[[3,[1]]],[[4,[[3,[1]]]]]],[[[8,[7]],7],[[8,[7]]]],[[[8,[7]],7],[[8,[7]]]],[[[8,[[0,[7,15]]]],[0,[7,15]]],[[8,[[0,[7,15]]]]]],[[[6,[1]]],1],0,[[[6,[1]]],[[5,[1]]]],[[[5,[1]],[5,[1]]],[[5,[1]]]],[[[43,[[3,[[0,[1,22]]]]]]],[[4,[[3,[[0,[1,22]]]]]]]],[[[5,[[0,[1,7]]]]],[[5,[[0,[1,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[0,[1,7]]]]],[[5,[[0,[1,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[1]]],[[0,[36,37]]]],[[],27],[[],27],[[[8,[1]]],[[27,[[3,[1]]]]]],[[],27],[[[32,[[11,[1]]]]],[[27,[[3,[1]]]]]],[[[32,[[5,[1]]]]],[[27,[[3,[1]]]]]],[32,[[27,[[3,[1]]]]]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[[5,[1]],34],[[27,[44]]]],[[[6,[1]],34],[[27,[44]]]],[[[8,[1]],34],[[27,[44]]]],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[[5,[[0,[7,28]]]],[5,[[0,[7,28]]]]],[[27,[[0,[7,28]],46]]]],[[[6,[[0,[7,28]]]]],[[27,[[0,[7,28]],46]]]],[[[8,[[0,[7,28]]]]],[[27,[[0,[7,28]],46]]]],[[[8,[1]]],[[4,[47]]]],[[[5,[1]]],1],0,[[[11,[1]]]],[[[5,[1]]]],[[[5,[1]]],1],0,[[[3,[1]],1],[[4,[1]]]]],"c":[],"p":[[8,"CoordinateType"],[8,"Signed"],[3,"PiecewiseLinearFunction"],[4,"Option"],[3,"Point"],[3,"Line"],[8,"Float"],[3,"LineString"],[8,"Clone"],[4,"ExpandDomainStrategy"],[3,"Coordinate"],[4,"Closest"],[15,"bool"],[3,"Polygon"],[8,"RTreeNum"],[3,"AABB"],[8,"PartialEq"],[3,"MultiPolygon"],[3,"MultiLineString"],[3,"MultiPoint"],[8,"FloatConst"],[8,"Sum"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"FromPrimitive"],[15,"array"],[8,"Into"],[3,"Global"],[3,"Vec"],[8,"IntoIterator"],[8,"Fn"],[15,"usize"],[8,"ExactSizeIterator"],[8,"Iterator"],[8,"Neg"],[3,"PointsOfInflectionIterator"],[3,"SegmentsIterator"],[3,"Points"],[3,"PointsIter"],[15,"slice"],[3,"Error"],[3,"TypeId"],[3,"FailedToConvergeError"],[4,"WindingOrder"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
