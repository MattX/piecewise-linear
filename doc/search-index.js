var N=null,E="",T="t",U="u",searchIndex={};
var R=["pointsofinflectioniterator","option","piecewiselinearfunction","coordinate","points_of_inflection_iter","Returns a new piecewise linear function that is the…","result","try_from","try_into","borrow_mut","into_iter","type_id","to_owned","clone_into","expanddomainstrategy","formatter","PiecewiseLinearFunction","ExpandDomainStrategy","PointsOfInflectionIterator","SegmentsIterator"];

searchIndex["piecewise_linear"]={"doc":E,"i":[[3,R[16],"piecewise_linear","A continuous piecewise linear function.",N,N],[12,"coordinates",E,E,0,N],[3,R[18],E,"Structure returned by `points_of_inflection_iter()` on…",N,N],[3,R[19],E,"Structure returned by `segments_iter()` on a…",N,N],[4,R[17],E,"Controls how the domain of a function is expanded using…",N,N],[13,"ExtendSegment",E,"Extend the segment at the edge of the function.",1,N],[13,"ExtendValue",E,"Add a constant segment with the value of the edge point of…",1,N],[5,R[4],E,"Returns an iterator over triples `(x, y1, y2)`, where `x`…",N,[[],[[R[0]],[R[1],[R[0]]]]]],[5,"sum",E,"Sums the functions together. Returns `None` in case of…",N,[[],[[R[2]],[R[1],[R[2]]]]]],[11,"new",E,"Creates a new `PiecewiseLinearFunction` from a vector of…",0,[[["vec",[R[3]]],[R[3]]],[R[1]]]],[11,"constant",E,"Returns a new constant `PiecewiseLinearFunction` with the…",0,[[[T]],[R[1]]]],[11,"domain",E,"Returns a function's domain, represented as its min and max.",0,[[["self"]]]],[11,"has_same_domain_as",E,"Checks whether this function has the same domain as…",0,[[["self"],[R[2]]],["bool"]]],[11,"segments_iter",E,"Returns an iterator over the segments of f. This iterator…",0,[[["self"]],["segmentsiterator"]]],[11,R[4],E,"Returns an iterator over the joint points of inflection of…",0,[[[R[2]],["self"]],[[R[1],[R[0]]],[R[0]]]]],[11,"segment_at_x",E,"Returns a segment `((x1, y1), (x2, y2))` of this function…",0,[[["self"],[T]],[["line"],[R[1],["line"]]]]],[11,"y_at_x",E,"Computes the value f(x) for this piecewise linear…",0,[[["self"],[T]],[R[1]]]],[11,"shrink_domain",E,R[5],0,[[["self"]],[[R[2]],[R[1],[R[2]]]]]],[11,"expand_domain",E,R[5],0,[[["self"],[R[14]]],[R[2]]]],[11,"add",E,"Sums this method with another piecewise linear function.…",0,[[["self"],[R[2]]],[[R[2]],[R[1],[R[2]]]]]],[11,"max",E,R[5],0,[[["self"],[R[2]]],[[R[2]],[R[1],[R[2]]]]]],[11,"negate",E,"Returns -f.",0,[[["self"]],[R[2]]]],[11,"integrate",E,"Returns the integral of the considered function over its…",0,[[["self"]],[T]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[[T],["self"]]]],[11,R[7],E,E,0,[[[U]],[R[6]]]],[11,R[8],E,E,0,[[],[R[6]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],["typeid"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[10],E,E,2,[[],["i"]]],[11,R[7],E,E,2,[[[U]],[R[6]]]],[11,R[8],E,E,2,[[],[R[6]]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],["typeid"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[10],E,E,3,[[],["i"]]],[11,R[7],E,E,3,[[[U]],[R[6]]]],[11,R[8],E,E,3,[[],[R[6]]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],["typeid"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[[T],["self"]]]],[11,R[7],E,E,1,[[[U]],[R[6]]]],[11,R[8],E,E,1,[[],[R[6]]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],["typeid"]]],[11,"next",E,E,2,[[["self"]],[R[1]]]],[11,"next",E,E,3,[[["self"]],[R[1]]]],[11,"clone",E,E,0,[[["self"]],[R[2]]]],[11,"clone",E,E,1,[[["self"]],[R[14]]]],[11,"into",E,E,0,[[],["vec"]]],[11,"eq",E,E,0,[[["self"],[R[2]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[2]]],["bool"]]],[11,"eq",E,E,1,[[[R[14]],["self"]],["bool"]]],[11,"fmt",E,E,0,[[["self"],[R[15]]],[R[6]]]],[11,"fmt",E,E,1,[[["self"],[R[15]]],[R[6]]]],[11,R[7],E,E,0,[[["linestring"]],[R[6]]]],[11,R[7],E,E,0,[[["vec",[R[3]]],[R[3]]],[R[6]]]],[11,R[7],E,E,0,[[["vec",["point"]],["point"]],[R[6]]]],[11,R[7],E,E,0,[[["vec"]],[R[6]]]],[11,"neg",E,E,0,[[]]]],"p":[[3,R[16]],[4,R[17]],[3,R[18]],[3,R[19]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);